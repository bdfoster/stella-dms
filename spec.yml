swagger: '2.0'

info:
  version: "0.1.0"
  title: StellaDMS API
  
produces:
  - application/json
  
consumes:
  - application/json

definitions:
  person:
    description: A system representation of a human. Can be associated with a Document.
    type: object
    example:
      application/json:
        id: 25e564a7-c25d-4629-8ad7-2c200bf03f93
        given_name: Brian
        middle_name: David
        family_name: Foster
        display_name: Brian D. Foster
        email_address: brian@example.com
        birth_date: 1980-01-12
        pin: "5932"
    required:
      - id
      - given_name
      - family_name
    properties:
      id:
        type: string
        readOnly: true
        description: Auto-generated UUID(v4), used as the unique identifier.
        
      given_name:
        type: string
        description: The person's given (a.k.a first) name.
      middle_name:
        type: string
        description: The person's middle name.
      family_name:
        type: string
        description: The person's family (a.k.a last) name.
      display_name:
        type: string
        description: Calculated string derived from `given_name`, `family_name`, and optionally, `middle_name`.
      email_address:
        type: string
        format: email
        description: The person's email address.
      birth_date:
        type: string
        format: date
        description: The person's date of birth. Useful for validating identity.
      pin:
        type: string
        minLength: 4
        maxLength: 6
        description: Personal Identification Number (PIN), useful for validating identity over the phone.
  user:
    title: user
    description: A representation of a person with access to the system.
    type: object
    required:
      - id
      - person
      - password
      - is_active
    properties:
      id:
        type: string
        description: Auto-generated UUID(v4), used as the unique identifier.
        readOnly: true
        
      person:
        type: string
        description: A valid `person` identifier.
        
      password:
        type: string
        format: password
        description: The user's password (hashed in database).
        
      is_active:
        type: boolean
        default: true
        readOnly: true
        description: If `false`, user cannot be authenticated, therefore account is effectively suspended.

securityDefinitions:
  client:
    description: |
      A `client` can authenticate itself against the service. With this
      type of authentication, a `client` is *not* acting on behalf of a user.
      An application can use this type of authentication to update various
      fields within its own profile and optionally perform global operations
      such as creating a document or getting a list of users. 
    
    type: oauth2
    flow: application
    tokenUrl: /api/v1/auth
    scopes:
      client:update[:<id>]: Update certain fields within its own profile.
      doc:create: Create a document.
      doc:update[:<id>]: Update a document.
      users:search: Search for user accounts.

    
paths:
  /api/v1/users:
    get:
      security:
        client:
          - user:search
      operationId: users.search
      summary: Find a list of user objects, with optional filtering.
      parameters:
        - name: skip
          type: number
          format: integer
          in: query
          required: false
          minimum: 0
          default: 0
          description: The number of resources to skip. Useful for pagination.
          
        - name: limit
          type: number
          format: integer
          in: query
          required: false
          minimum: 0
          default: 0
          description: The number of resource instances to return. Useful for pagination.
          
        - name: fields
          type: string
          format: csv
          in: query
          required: false
          description: The fields to return. 
          
      responses:
        200:
          description: Success
        401:
          description: Unauthorized
        403:
          description: Forbidden
        422:
          description: Validation Error
              

  /api/v1/users/{id}:
    get:
      operationId: users.get
      summary: Get a user object with matching identifier.
      parameters:
      - name: id
        in: path
        required: true
        type: integer

      responses:
        200:
          description: Success

    patch:
      operationId: users.update
      summary: Partially update a user object with matching identifier.
      parameters:
      - name: id
        in: path
        required: true
        type: string
        
      responses:
        200:
          description: Success
          
  /api/v1/clients:
    get:
      operationId: clients.search
      summary: Find a list of client objects, with optional filtering.
      parameters:
        - name: skip
          in: query
          required: false
          type: integer
          format: double
      
      responses:
        200:
          description: Success

          
  /api/v1/clients/{id}:
    get:
      operationId: client.get
      summary: Get a client object with matching identifier.
      parameters:
      - name: id
        in: path
        required: true
        type: string
        
       
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Success
    patch:
        operationId: clients.update
        summary: Partially update a client object with matching identifier.
        consumes:
          - application/json
        parameters:
        - name: id
          in: path
          required: true
          type: string
          
        responses:
          200:
            description: Success
      
